// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UnlimintSDK_SwiftUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import MatomoTracker
import Swift
import SwiftUI
import Swinject
import UIKit
import UnlimintSDK_Core
@_exported import UnlimintSDK_SwiftUI
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct NavigationBarStyle {
  public enum Bar {
    case largeNavBar
    case small
    case smallTranslucent
    public static func == (a: UnlimintSDK_SwiftUI.NavigationBarStyle.Bar, b: UnlimintSDK_SwiftUI.NavigationBarStyle.Bar) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Color {
    case light
    case dark
    case transparentDark
    case transparentLight
    case custome(title: UIKit.UIColor?, barTint: UIKit.UIColor?, backgroundImage: UIKit.UIImage?, background: UIKit.UIColor?)
  }
  public var bar: UnlimintSDK_SwiftUI.NavigationBarStyle.Bar
  public var statusBarStyle: UIKit.UIStatusBarStyle
  public var navigationBar: UnlimintSDK_SwiftUI.NavigationBarStyle.Color
  public var tintColor: UIKit.UIColor
  public init(bar: UnlimintSDK_SwiftUI.NavigationBarStyle.Bar, statusBarStyle: UIKit.UIStatusBarStyle, navigationBarColor: UnlimintSDK_SwiftUI.NavigationBarStyle.Color, tintColor: UIKit.UIColor)
}
public enum Methods : Swift.String {
  case binding
  case paymentWithCard
  case paymentWithToken
  case payPal
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PaymentErrors : Swift.Error {
  case payment(UnlimintSDK_Core.UnlimintErrors)
  case decline
}
public struct ViewControllerStyle {
  public var backgroundColor: UIKit.UIColor
  public init(backgroundColor: UIKit.UIColor)
}
public enum PresentationStyle {
  case present(UIKit.UIViewController)
}
public enum BindingErrors : Swift.Error {
  case binding(UnlimintSDK_Core.UnlimintErrors)
  case decline
}
@_Concurrency.MainActor(unsafe) public struct CheckoutSwiftUIView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s19UnlimintSDK_SwiftUI08CheckoutC6UIViewV4bodyQrvp", 0) __
}
public struct MainButtonStyle {
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleColor: (normal: UIKit.UIColor?, disabled: UIKit.UIColor?)
  public var backgroundColor: (normal: UIKit.UIColor?, disabled: UIKit.UIColor?)
  public init(cornerRadius: CoreFoundation.CGFloat, titleColor: (normal: UIKit.UIColor?, disabled: UIKit.UIColor?), backgroundColor: (normal: UIKit.UIColor?, disabled: UIKit.UIColor?))
}
extension Foundation.NSNotification.Name {
  public static let eventUnlimintSuccess: Foundation.NSNotification.Name
  public static let eventUnlimintFailure: Foundation.NSNotification.Name
  public static let eventUnlimintFinished: Foundation.NSNotification.Name
  public static let dismissApp: Foundation.NSNotification.Name
}
extension UnlimintSDK_SwiftUI.Unlimint {
  public enum NotificationKeys : Swift.String {
    case method
    case checkoutError
    case bindingError
    case paymentError
    case pan
    case cardToken
    case id
    case terminateType
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
@_hasMissingDesignatedInitializers final public class Unlimint {
  public static let shared: UnlimintSDK_SwiftUI.Unlimint
  final public var theme: UnlimintSDK_SwiftUI.Theme
  final public var skipStatusPages: Swift.Bool
  final public var get_card_Binding_Token: Swift.Bool
  final public var environment: UnlimintSDK_Core.Environments {
    get
    set
  }
  @objc deinit
}
extension UnlimintSDK_SwiftUI.Unlimint {
  public enum PaymentMethods {
    case card(UnlimintSDK_Core.PaymentMethodData)
    case cardToken(type: UnlimintSDK_Core.CardPaymentSystem?, UnlimintSDK_Core.PaymentTokenMethodData)
    case payPal(UnlimintSDK_Core.PaypalPaymentMethodData)
  }
  final public func checkout(for mobileToken: Swift.String, with methods: [UnlimintSDK_SwiftUI.Unlimint.PaymentMethods]) -> some SwiftUI.View
  
  final public func bind(for mobileToken: Swift.String, with methods: UnlimintSDK_Core.BindingMethodData) -> some SwiftUI.View
  
}
@_Concurrency.MainActor(unsafe) public struct HomeViewSwiftUI : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(_ token: Swift.String, paymentMethod: [UnlimintSDK_SwiftUI.Unlimint.PaymentMethods], cardData: UnlimintSDK_Core.BindingMethodData)
  @_Concurrency.MainActor(unsafe) public init(_ token: Swift.String, paymentMethod: [UnlimintSDK_SwiftUI.Unlimint.PaymentMethods])
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s19UnlimintSDK_SwiftUI08HomeViewcD0V4bodyQrvp", 0) __
}
public struct Theme {
  public var buttonBackgroundColor: SwiftUI.Color
  public var buttonBackgroundColorDisable: SwiftUI.Color
  public var buttonTextColorColor: SwiftUI.Color
  public var buttonTextColorColorDarkDisable: SwiftUI.Color
  public var cardBackground: SwiftUI.Color
  public var cardTextColor: SwiftUI.Color
  public var cardInputTextColor: SwiftUI.Color
  public var cardInputBackgroundColor: SwiftUI.Color
  public var topTitleTextColor: SwiftUI.Color
  public var closeButtonTextColor: SwiftUI.Color
  public var pageBackgroundColor: SwiftUI.Color
  public var titleTextColor: SwiftUI.Color
  public var titleDetailTextColor: SwiftUI.Color
  public var cellBackgroundColor: SwiftUI.Color
  public var addCardText: Swift.String
  public var changeAmountBGColor: SwiftUI.Color
  public init()
}
extension UnlimintSDK_SwiftUI.NavigationBarStyle.Bar : Swift.Equatable {}
extension UnlimintSDK_SwiftUI.NavigationBarStyle.Bar : Swift.Hashable {}
extension UnlimintSDK_SwiftUI.Methods : Swift.Equatable {}
extension UnlimintSDK_SwiftUI.Methods : Swift.Hashable {}
extension UnlimintSDK_SwiftUI.Methods : Swift.RawRepresentable {}
extension UnlimintSDK_SwiftUI.Unlimint.NotificationKeys : Swift.Equatable {}
extension UnlimintSDK_SwiftUI.Unlimint.NotificationKeys : Swift.Hashable {}
extension UnlimintSDK_SwiftUI.Unlimint.NotificationKeys : Swift.RawRepresentable {}
